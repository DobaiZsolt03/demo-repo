package other;

import java.math.BigInteger;
import java.util.Random;

public class Diffie_Hellman {
	
	
	static BigInteger GenerateSecretBigInteger() {
		BigInteger maxLimit = new BigInteger
		BigInteger minLimit = new BigInteger
		BigInteger bigInteger = maxLimit.subtract(minLimit);
		Random randNum = new Random();
		int len = maxLimit.bitLength();
		BigInteger result = new BigInteger(len, randNum);
		
		if (result.compareTo(minLimit) < 0) {
			result = result.add(minLimit);
		}
		
		if (result.compareTo(bigInteger) >= 0) {
			result = result.mod(bigInteger).add(minLimit);
		}
		return result;
		
	}

	public static void main(String args[]) {
		
			
			BigInteger  g = new BigInteger("2");
			
			
			BigInteger n = GenerateSecretBigInteger();
			
			BigInteger alice = GenerateSecretBigInteger();
			
			BigInteger bob = GenerateSecretBigInteger();
			
			BigInteger result_alice = g.modPow(alice, n);
			BigInteger result_bob = g.modPow(bob, n);
			
			System.out.printf("Alice's message to Bob: "+result_alice+"\n");
			System.out.printf("Bob's message to Alice: "+result_bob+"\n");
			
			BigInteger final_result_alice = result_bob.modPow(alice, n);
			BigInteger final_result_bob = result_alice.modPow(bob, n);
			
			
			System.out.printf("Alice's final key: " +final_result_alice+"\n");
			System.out.printf("Bob's final key: " +final_result_bob+"\n");
			
			if(final_result_alice.compareTo(final_result_bob)==0) {
				System.out.println("We have a matching key!");
			}
	}
	
	
}
